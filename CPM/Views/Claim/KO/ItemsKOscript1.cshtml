@using CPM.Helper
@using System.Collections
@using System.Web.Script.Serialization
@using System.Collections
@using CPM.Services
@using CPM.Helper

    <script type="text/javascript" language="javascript" defer="defer">
        function show(ddl) { alert($("#ddlDefect option[value='this.value']").text()); }
        function editable(ctrl, show) {
            if (show) $(ctrl).removeAttr('readonly').removeClass('noBorder').addClass('note');
            else $(ctrl).attr('readonly', true).removeClass('note').addClass('noBorder');
         }

    function doEditable(editDiv)
    {
        $(editDiv).closest('tr').find("td input[class='textBox']").closest('td').click();
        //editDiv.parentElement.parentElement.children[4].click();
    }
    var doTDHover = true;
    
    function toggleLabel(td) {return;
        if (doTDHover) {
            var control = $('input:first', td)[0];
            var isText = (control != null);
            if (!isText) control = $('select:first', td)[0];
            var isDDL = (control != null);

            if (isDDL || isText)
                $(control).toggle(); // toggle the textbox

            var ctrlVal = '';
            if (isText) ctrlVal = $(control).val();
            //SO: 1643227/get-selected-text-from-dropdownlist-using-jquery
            if (!isText && isDDL) ctrlVal = $(control).children("option").filter(":selected").text();

            $('span:first', td).html(ctrlVal).toggle(); // set textbox value in span and toggle
            //$('span:first', td).html($('input:first', td).val());            
        }
    }
    // Put script at bottom to avoid early-references
    $(document).ready(function () {        
        //setFocus("Item1");        
        createKO();
    });
    
    var IsEditMode = false;
    var NextNewItemID = -1;
    var itemsModel = function () {
        var self = this;
        var _dummyObservable = ko.observable(); // use inside computed property

        self.showGrid = ko.observable(true);
        self.itemToAdd = ko.observable();
        self.isEditMode = ko.observable();
        self.allItems = ko.observableArray([]); // Initial items

        self.emptyItem = ko.observable();

        self.invalidateToRefreshComputed = function () {
            _dummyObservable.notifySubscribers(); //fake a change notification
        };

        /*self.itemToAdd.Defect = ko.computed(function () {            
        return $("#ddlDefect option[value='" + self.itemToAdd.NatureOfDefect + "']").text();
        });*/

        self.CreditAmtTotal = ko.computed(function () {
            // http://stackoverflow.com/questions/10940302/knockout-compute-sum
            var total = parseFloat(0.00);
            _dummyObservable(); //retrieve and ignore the value
            for (var i = 0; i < self.allItems().length; i++) {
                if (!self.allItems()[i]._Deleted)
                    total += parseFloat(self.allItems()[i].CreditAmt1);
            }
            return total; //.toFixed(2);
        });

        self.InvoiceAmtTotal = ko.computed(function () {
            // http: //stackoverflow.com/questions/9351939/using-ko-utils-arrayforeach-to-iterate-over-a-observablearray
            var total = parseFloat(0.00);
            _dummyObservable(); //retrieve and ignore the value
            ko.utils.arrayForEach(self.allItems(), function (item) {
                if (!item._Deleted)
                    total += parseFloat(item.InvoiceAmt);
            });
            return total; //.toFixed(2);
        });

        self.formatData = function () {
            ko.utils.arrayForEach(self.allItems(), function (item) {
                item.InvoiceAmt1 = parseFloat(item.InvoiceAmt1.toFixed(2));
                item.CreditAmt1 = parseFloat(item.CreditAmt1.toFixed(2));
            });
        }

        self.openAttachFilesDetail = function (item) { 
            var url = "@Url.Action("FilesDetailKO", "Claim")" + "?ClaimDetailID=" + item.ID + "&ClaimGUID=" + item.ClaimGUID;
            return openWin(url,450,650);
        }

        self.showAddNew = function () {
            self.showGrid(false);
            self.setEdited(ko.toJS(self.emptyItem));
            IsEditMode = false;
        }
        self.setEdited = function (item) {
            item._Edited = !item._Added; //alert(ko.mapping.toJSON(ko.mapping.fromJS(new Date())()));
            item.LastModifiedDate = Date111; //Date111 ko.mapping.fromJS(new Date())            

            //self.itemToAdd = ko.mapping.fromJS(ko.toJS(item));
            self.itemToAdd(item); //ko.mapping.fromJS(ko.toJS(item), self.itemToAdd);

            self.showGrid(false);
            //Redo autopopulate
            var BrandID = $('#BrandID'); //, window.parent.document
            BrandID = (BrandID != null) ? BrandID.val() : "";
            fillItemsForBrand(BrandID, false);

            IsEditMode = true;
        }
        self.setEditedFlag = function (item) {
            item._Edited = !item._Added;
            item.LastModifiedDate = Date111;

            var index = self.allItems.indexOf(item);
            self.allItems.remove(item);
            self.allItems.splice(index, 0, item);
        }
        self.saveItem = function (item) {
            //if (self.itemToAdd != null) // Prevent blanks and duplicates
            if (item.ItemCode == null || item.ItemCode == "")//if (self.itemToAdd.ItemCode == null || self.itemToAdd.ItemCode == "")
                alert("Item is a required field");
            else {
                //self.itemToAdd().PostedOn = Date111;//ko.mapping.fromJS(new Date())
                if (!IsEditMode) {
                    item.ID = NextNewItemID;
                    self.allItems.push(item); // self.allItems.push(ko.toJS(item)); //self.allItems.push((self.itemToAdd)); 
                    NextNewItemID = NextNewItemID - 1;
                    self.emptyItem.ID = NextNewItemID; // NOT WORKING as expected
                } //cloneObservable
                else {
                    /*var old = ko.utils.arrayFirst(self.allItems(), function (item) {
                    return item.ID() == self.itemToAdd.ID();
                    });
                    self.allItems.replace(old, self.itemToAdd);
                    //self.locations.valueHasMutated();*/

                    var index = self.allItems.indexOf(item);
                    self.allItems.remove(item);
                    self.allItems.splice(index, 0, item);
                }

                IsEditMode = false;
                self.itemToAdd(null); //ko.toJS(self.emptyItem) // ko.mapping.fromJS(ko.toJS(self.emptyItem), self.itemToAdd);
                //self.allItems.valueHasMutated(); // Notify Grid to update
                //self.itemToAdd = cloneObservable(self.emptyItem);  
                self.showGrid(true);
            }
        };

        self.removeSelected = function (item) {
            if (item != null) // Prevent blanks and duplicates
            {
                //self.allItems.valueWillMutate();
                item._Deleted = true;
                if (item._Added) {
                    item._Added = false;
                    self.allItems.remove(item);
                }
                /*var old = ko.utils.arrayFirst(self.allItems(), function (itm) { return itm.ID == item.ID; });
                self.allItems.replace(old, item); self.allItems.valueHasMutated();
                var index = self.allItems.indexOf(item);
                self.allItems.remove(item);
                self.allItems.splice(index, 0, item);*/
            }
        };

        self.unRemoveSelected = function (item) {
            if (item != null) // Prevent blanks and duplicates
            {
                item._Deleted = false;

                var index = self.allItems.indexOf(item);
                self.allItems.remove(item);
                self.allItems.splice(index, 0, item);
            }
        };


        self.cancelItem = function (item) {
            IsEditMode = false;
            self.itemToAdd(null); //ko.toJS(self.emptyItem) // ko.mapping.fromJS(ko.toJS(self.emptyItem), self.itemToAdd);
            self.showGrid(true);
        };

        self.saveToServer = function () {
            ko.utils.postJson(location.href, { items: ko.mapping.toJS(self.allItems) }); //ko.toJSON(self.allItems)

            // $.getJSON('@Url.Action("ItemsKOVM", "Claim")',
            //function (data) { ko.mapping.fromJS(data.AllItems, viewModel.allItems); });

            return false;
        }

        self.cloneObj = function (obj) {
            if (ko.isWriteableObservable(obj)) return ko.observable(obj()); //this is the trick
            if (obj === null || typeof obj !== 'object') return obj;

            var temp = obj.constructor(); // give temp the original obj's constructor
            for (var key in obj) {
                temp[key] = cloneObj(obj[key]);
            }

            return temp;
        };

        /*http://jsfiddle.net/rniemeyer/GgFa9/
        self.jsonText = ko.computed(function() {
        return JSON.stringify($.map(self.allItems(), function (item) { return item.val(); }));
        });*/
    };

    function cloneObservable(observableObject) { return ko.mapping.fromJS(ko.toJS(observableObject)); }

    

 function createKO()
 {
        var viewModel = new itemsModel();
        $.getJSON('@Url.Action("ItemsKOVM", "Claim")',
         function (data) {
             //self.itemsModel = data;
             // Because we need to show/hide file upload if (data.ItemToAdd.ID != -1) data.ItemToAdd.ID = NextNewItemID;

             viewModel.itemToAdd(data.ItemToAdd); // viewModel.itemToAdd = ko.mapping.fromJS(data.ItemToAdd);
             viewModel.emptyItem(data.ItemToAdd); // viewModel.emptyItem = ko.mapping.fromJS(data.ItemToAdd);

             viewModel.allItems(data.AllItems); // viewModel.allItems(ko.mapping.fromJS(data.AllItems));
              // viewModel.allItems = ko.mapping.fromJS(data.AllItems);

             // viewModel.Defects(data.Defects); //
             viewModel.Defects = ko.mapping.fromJS(data.Defects); 
             viewModel.showGrid(data.showGrid); // viewModel.showGrid = ko.mapping.fromJS(data.showGrid);

             viewModel.invalidateToRefreshComputed();
             viewModel.formatData();
             ko.applyBindings(viewModel);
         });
 }    
    </script>   