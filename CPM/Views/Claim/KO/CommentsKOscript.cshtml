<script type="text/javascript">
var IsCCEditMode = false;
var NextNewCommentID = -1;
var commentsViewModel = function () {
    var self = this;
    self.emptyComment = "";

    self.commentToAdd = ko.observable();
    self.allComments = ko.observableArray();
    self.AssignTo = ko.observable();
    self.AssignToVal = ko.observable();
    @*//self.jsonText = ko.computed(function() { return ("JSON: " + ko.toJSON(self.commentToAdd())); });*@

    self.setEdited = function (comment) {
        comment._Edited(!comment._Added());
        comment.PostedOn(Date111); 
    }
    self.setEditedFlag = function (comment) {
        comment._Edited(!comment._Added());
        comment.LastModifiedDate(Date111);
        comment.PostedOn(Date111); 

        /*var index = self.allComments.indexOf(comment);
        self.allComments.remove(comment);
        self.allComments.splice(index, 0, comment);*/
    }
    self.addComment = function (comment) {
        if (comment.Comment1 == null || comment.Comment1 == "")            
            {@*//http://knockoutjs.com/documentation/event-binding.html*@
            showNOTY("Comment is a required field", false);
                return false; 
            }
        else {
            if (!IsCCEditMode) {
                comment.ID = NextNewCommentID;
                self.allComments.push(ko.mapping.fromJS(cloneObservable(comment)));

                self.sendEmailPost(comment);

                NextNewCommentID = NextNewCommentID - 1;
                self.emptyComment.ID = NextNewCommentID; // NOT WORKING as expected
                    
                self.cancelComment(comment);//commentToAdd(cloneObservable(self.emptyCommment));
            } 
            else {
                @*//HT: if observable is set correctly nothing needs to be done
                /*var index = self.allComments.indexOf(comment);
                self.allComments.remove(comment);
                self.allComments.splice(index, 0, comment);*/*@
            }
        }
        return true; @*// because we need to ajax submit the form *@
    };        

    self.removeSelected = function (comment) {
        if (comment != null)
        {
            comment._Deleted(true);
            if (comment._Added()) {
                comment._Added(false);
                self.allComments.remove(comment);
            }
        }
    };

    self.unRemoveSelected = function (comment) {
        if (comment != null) // Prevent blanks and duplicates
        {
            comment._Deleted(false);

            @*HT: Now that we've proper observable mapping and cloning in place this is NOT needed
            var index = self.allItems.indexOf(comment);
            self.allItems.remove(comment);
            self.allItems.splice(index, 0, comment);*@
        }
    };


    self.cancelComment = function (comment) {
        IsCCEditMode = false;
        @*comment.allComments().valueHasMutated();//SO: 8537397
        //ko.mapping.fromJS(self.selectedComment, self.commentToAdd); *@
        self.commentToAdd(cloneObservable(self.emptyComment));
    };

    self.sendEmailPost = function (comment) {
        var _AssignedTo = $("#AssignedTo").val();
        var _ClaimNo = $("#ClaimNo").val();
        var proceed = false;
        proceed = !(comment == null || _AssignedTo == null || _ClaimNo == null);
            
        if(proceed){
            $.post('@Url.Action("CommentsKOEmail", "Claim", new { ClaimGUID = ViewData["ClaimGUID"] })',
                    { 
                    CommentObj: ko.mapping.toJSON(comment),
                    AssignedTo: _AssignedTo,
                    ClaimNo : _ClaimNo
                    },  
                    function (result) {   
                        //alert(result); HT: we can notify user if a successful email was sent
                        showNOTY(result.msg, result.sendMail);
                        if (result.sendMail) {
                            $("#AssignToOLD").val(_AssignedTo).trigger("change");
                        }
                    }
            );
        }
    };

    self.saveToServer = function () {
        ko.utils.postJson(location.href, { comments: ko.mapping.toJS(self.allComments) }); //ko.toJSON(self.allComments)
        return false;
    }

    @*http://jsfiddle.net/rniemeyer/GgFa9/
    self.jsonText = ko.computed(function() {
    return JSON.stringify($.map(self.allComments(), function (comment) { return comment.val(); }));
    });*@
};
var viewModelComments = new commentsViewModel();
function createCommentsKO()
{
    var ClaimAssignedTo = $("#AssignedTo").val();
    $.getJSON('@Html.Raw(Url.Action("CommentsKOVM", "Claim", new { ClaimGUID = ViewData["ClaimGUID"] }))' +  '&AssignedTo=' + ClaimAssignedTo ,
        function (data) {
            if (data.CommentToAdd.ID != -1) 
            data.CommentToAdd.ID = NextNewCommentID;

            viewModelComments.emptyComment = data.EmptyComment; @*// THIS SHUD NOT BE AN OBSERVABLE*@
            viewModelComments.AssignTo(data.AssignedTo);   $("#AssignToOLD").val(data.AssignedTo);
            viewModelComments.AssignToVal("");
             
            viewModelComments.commentToAdd(data.CommentToAdd);@*//var mapping = {'ignore': ["PostedOn"]};*@
            viewModelComments.allComments = ko.mapping.fromJS(data.AllComments); //, mapping);
            viewModelComments.Users = ko.mapping.fromJS(data.Users);
             
            @*
            //$("#commentTemplate").tmpl(data.AllComments).appendTo( "#tbComments" );
            // viewModelComments.jsonText = ko.dependentObservable(function() {
            // if(this.allComments() != null)  return ("JSON: " + ko.toJSON(this.allComments())); }, this);
            *@
            @*alert('Claim-Comments');*@
            ko.applyBindings(viewModelComments, document.getElementById("divComments"));
        });
}

function doCmtEmailPost(comment) {
    var data = {}; data[txtId] = txtVal;
    var url = '@Url.Action("CommentKODelete", "Claim", new { ClaimGUID = ViewData["ClaimGUID"] })';
    $.post(url, data);
    return false; // prevent any postback
}
     
    // Put script at bottom to avoid early-references
@*
HT:CAUTION - using document.ready causes duplicate call which replicates the binding!
$(document).ready(function () {
    setFocus("Comment1");        
    createCommentsKO();
});*@

function callDocReadyComments()
{
    createCommentsKO();
    setFocus("Comment1");
}

function setAssignedTo(ddl)
{
    var ddlID = $(ddl).val();
    var ddlTXT = $(ddl).children("option").filter(":selected").text();
        
    $(ddl).parent().children("input:first").val(ddlTXT).trigger("change");        

    $("#AssignedTo").val(ddlID).trigger("change");
    $("#AssignedToVal").val(ddlTXT).trigger("change");
}
</script>   