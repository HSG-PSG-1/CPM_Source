@*@using CPM.Helper
@using System.Collections
@using System.Web.Script.Serialization
@using System.Collections
@using CPM.Services
@using CPM.Helper
<script id="commentTemplate" type="text/x-jquery-tmpl">    
    <tr>
        <td nowrap="nowrap">
            <div class="dDialog" onclick="reloadCmt('@Url.Action("CommentsKO", new { CommentID = 0 })${ID}');">@Html.Raw(@Defaults.editImg)</div>&nbsp;
            @Html.Raw(Defaults.delPOSTImgTACO("CommentID", -1, "doCmtDelPost"))
        </td>
        <td>${CommentBy}</td>
        <td>${PostedOn}</td>
        <td>${Comment1}</td>
    </tr>
</script>*@
    <script type="text/javascript" language="javascript" defer="defer">
    @*function doEditable(editDiv)
    {
        $(editDiv).closest('tr').find("td input[class='textBox']").closest('td').click();
        //editDiv.parentElement.parentElement.children[4].click();
    }
    var doTDHover = true;
    
    function toggleLabel(td) {
        if(doTDHover){
            $('input:first', td).toggle(); // toggle the textbox
            $('span:first', td).html($('input:first', td).val()).toggle(); // set textbox value in span and toggle
            //$('span:first', td).html($('input:first', td).val());
        }
    }*@    
    var IsEditMode = false;
    var NextNewCommentID = -1;
    var commentsViewModel = function () {
        var self = this;
        self.emptyComment = "";

        self.commentToAdd = ko.observable();
        self.allComments = ko.observableArray();
        @*//self.jsonText = ko.computed(function() { return ("JSON: " + ko.toJSON(self.commentToAdd())); });*@

        self.setEdited = function (comment) {
            comment._Edited(!comment._Added());
            comment.PostedOn(Date111); 
        }
        self.setEditedFlag = function (comment) {
            comment._Edited(!comment._Added());
            comment.LastModifiedDate(Date111);
            comment.PostedOn(Date111); 

            /*var index = self.allComments.indexOf(comment);
            self.allComments.remove(comment);
            self.allComments.splice(index, 0, comment);*/
        }
        self.addComment = function (comment) {
            if (comment.Comment1 == null || comment.Comment1 == "")            
                {@*//http://knockoutjs.com/documentation/event-binding.html*@
                   alert("Comment is a required field"); 
                   return false; 
                }
            else {
                if (!IsEditMode) {
                    comment.ID = NextNewCommentID;
                    self.allComments.push(ko.mapping.fromJS(cloneObservable(comment)));

                    self.sendEmailPost(comment);

                    NextNewCommentID = NextNewCommentID - 1;
                    self.emptyComment.ID = NextNewCommentID; // NOT WORKING as expected
                    
                    self.cancelComment(comment);//commentToAdd(cloneObservable(self.emptyCommment));
                } 
                else {
                    @*//HT: if observable is set correctly nothing needs to be done
                    /*var index = self.allComments.indexOf(comment);
                    self.allComments.remove(comment);
                    self.allComments.splice(index, 0, comment);*/*@
                }
            }
            return true; @*// because we need to ajax submit the form *@
        };        

        self.removeSelected = function (comment) {
            if (comment != null)
            {
                comment._Deleted(true);
                if (comment._Added()) {
                    comment._Added(false);
                    self.allComments.remove(comment);
                }
            }
        };

        self.unRemoveSelected = function (comment) {
            if (comment != null) // Prevent blanks and duplicates
            {
                comment._Deleted(false);

                @*HT: Now that we've proper observable mapping and cloning in place this is NOT needed
                var index = self.allItems.indexOf(comment);
                self.allItems.remove(comment);
                self.allItems.splice(index, 0, comment);*@
            }
        };


        self.cancelComment = function (comment) {
            IsEditMode = false;
            @*comment.allComments().valueHasMutated();//SO: 8537397
            //ko.mapping.fromJS(self.selectedComment, self.commentToAdd); *@
            self.commentToAdd(cloneObservable(self.emptyComment));
        };

        self.sendEmailPost = function (comment) {
            var _AssignedTo = $("#AssignedTo").val();
            var _ClaimNo = $("#ClaimNo").val();
            var proceed = false;
            proceed = !(comment == null || _AssignedTo == null || _ClaimNo == null);
            
            alert(proceed  +":"+ comment +":"+ _AssignedTo +":"+ _ClaimNo);
            if(proceed){
                $.post('@Url.Action("CommentsKOEmail", "Claim", new { ClaimGUID = ViewData["ClaimGUID"] })',
                      { 
                        CommentObj: comment,
                        AssignedTo: _AssignedTo,
                        ClaimNo : _ClaimNo
                      },  
                      function (result) {   
                        alert(result);
                      }
                );
            }
        };

        self.saveToServer = function () {
            ko.utils.postJson(location.href, { comments: ko.mapping.toJS(self.allComments) }); //ko.toJSON(self.allComments)
            return false;
        }

        @*http://jsfiddle.net/rniemeyer/GgFa9/
        self.jsonText = ko.computed(function() {
        return JSON.stringify($.map(self.allComments(), function (comment) { return comment.val(); }));
        });*@
    };

 function createCommentsKO()
 {
        var commentsVM = new commentsViewModel();
        $.getJSON('@Url.Action("CommentsKOVM", "Claim", new { ClaimGUID = ViewData["ClaimGUID"] })',
         function (data) {
             if (data.CommentToAdd.ID != -1) 
                data.CommentToAdd.ID = NextNewCommentID;

             commentsVM.emptyComment = data.EmptyComment; @*// THIS SHUD NOT BE AN OBSERVABLE*@

             commentsVM.commentToAdd(data.CommentToAdd);@*//var mapping = {'ignore': ["PostedOn"]};*@
             commentsVM.allComments = ko.mapping.fromJS(data.AllComments); //, mapping);
             @*
             //$("#commentTemplate").tmpl(data.AllComments).appendTo( "#tbComments" );
             // commentsVM.jsonText = ko.dependentObservable(function() {
             // if(this.allComments() != null)  return ("JSON: " + ko.toJSON(this.allComments())); }, this);
             *@
             //alert('Claim-Comments');
             ko.applyBindings(commentsVM, document.getElementById("divComments"));
         });
 }

    function doCmtEmailPost(comment) {
        var data = {}; data[txtId] = txtVal;
        var url = '@Url.Action("CommentKODelete", "Claim", new { ClaimGUID = "" })';
        $.post(url, data);
        return false; // prevent any postback
    }
     
     // Put script at bottom to avoid early-references
    $(document).ready(function () {
        setFocus("Comment1");        
        createCommentsKO();
    });

    function callDocReadyComments()
    {
        setFocus("Comment1");        
        createCommentsKO();
    }     
    </script>   