@using CPM.Helper
@using System.Collections
@using System.Web.Script.Serialization
@model CPM.DAL.CommentKOModel
@using System.Collections
@using Webdiyer.WebControls.Mvc
@using CPM.Services
@using CPM.Helper
@{ ViewBag.Title = "Claim Comments KO Mobile";}
<head>
    <link rel="shortcut icon" href="@Url.Content("~/Content/favicon.ico")" type="image/x-icon" />
    <link rel="icon" href="@Url.Content("~/Content/favicon.ico")" type="image/ico" />
    <link href="@Url.Content("~/Content/Site.css")" rel="stylesheet" type="text/css" />
    <script language="javascript" src="@Url.Content("~/Content/Scripts/common.js")" type="text/javascript"></script>
    @*SOME scripts are better persisted in head *@ 
    <script src="@Url.Content("~/Content/jQUI/min/jquery-1.9.1.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Content/jQUI/min/jquery-migrate-1.1.0.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Content/Scripts/KO/knockout-2.2.0.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Content/Scripts/KO/knockout.mapping-latest.js")" type="text/javascript"></script>    
    <script src="@Url.Content("~/Content/Scripts/KO/KoExtra.js")" type="text/javascript"></script>

    @*<script src="@Url.Content("~/Content/Scripts/jquery.hint.js")" type="text/javascript"></script>    
    <script src="http://www.json.org/json2.js" type="text/javascript"></script>*@
</head>
<body><br />
<div id="divComments">
<div style="text-align:right"><input type="button" data-bind="click:saveToServer" class="button" value="Submit to Server" /></div>
    <table style="width: 100%" border="0">
        <tr>@*Add \ Edit Comment : START*@
            <td>
                <form>
                <table cellpadding="2" cellspacing="2" border="0">
                    <tr>
                        <td data-bind="with: commentToAdd" id="addComment">
                            <div style="display:none">
                            ID: <span data-bind="text:ID"></span>
                            Claim ID: <span data-bind="text:ClaimID"></span>
                            PostedOn: <input class="button" type="text" data-bind="date: PostedOn" />
                            CommentBy: <input class="button" type="text" data-bind="value:CommentBy" />
                            </div>
                            New Comment: <input type="text" data-bind="value:Comment1" />  
                            @*<button type="submit" data-bind="click:$parent.saveComment">Save</button>*@
                        </td>
                        <td>
                            <input type="button" data-bind="click:addComment" value="Add" class="button" />
                            <input id="btnReset" data-bind="click:cancelComment" type="reset" value="Cancel" class="button" />
                        </td>
                    </tr>
                </table>
                @*Add \ Edit Comment : END*@
                </form>
            </td>
        </tr>
        <tr>
            <td align="center">
                @* Comments : START *@
                <table class="thinBorder" width="99%">
                    <thead class="header">
                        <tr>
                            <th width="3%"></th>
                            <th nowrap="nowrap" width="10%">Comment By</th>
                            <th nowrap="nowrap" width="10%">Posted On</th>
                            <th>Comment</th>
                        </tr>
                    </thead>
                    <tbody data-bind="foreach: allComments">
                        <tr>
                            <td nowrap="nowrap">
                                <span data-bind='text:ID' style="display:none"></span>
                                <div class="dDialog" onclick="doEditable(this);" data-bind1="click:$parent.setSelected">@Html.Raw(@Defaults.editImg)</div>
                                &nbsp;
                                <div class="dDialog" data-bind="click:$parent.removeSelected">@Html.Raw(@Defaults.delImg)</div>
                                @*@Html.Raw(Defaults.delPOSTImgTACO("CommentID", -1, "doCmtDelPost"))*@
                            </td>
                            <td data-bind="text:CommentBy"></td>
                            @*<td data-bind="text:new Date(parseInt(PostedOn.substr(6)))"></td>*@
                            <td data-bind="date: PostedOn()"></td>@*http://forums.asp.net/t/1651593.aspx/1*@                            
                            <td onclick="$('input:first', this).show().focus();$('span:first', this).hide();">                            
                            <span data-bind="text:Comment1" onmouseover="toggleLabel(this.parentElement);"></span>
                            @*<span data-bind="text:new Date(parseInt(PostedOn.toString().substr(6))).toLocaleFormat('%d/%m/%Y')"></span>*@
                            <input data-bind="value:Comment1" style="display:none" onfocus="doTDHover = false;" onblur="doTDHover = true;toggleLabel(this.parentElement);" 
                            onmouseout="toggleLabel(this.parentElement);" class="textbox"/>
                            </td>
                        </tr>
                    </tbody>
                    <tfoot>
                        @*@Html.Raw(Defaults.chkNoRecords((Model.AllComments ?? new List<CPM.DAL.Comment>()).Count, 4))*@
                        </tfoot>
                </table>               
                @* Comments : END *@
            </td>
        </tr>
    </table>
</div>
<div>
@*{<span data-bind="text: jsonText"></span>}*@
</div>
</body>
    <script id="commentTemplate" type="text/x-jquery-tmpl">    
    <tr>
        <td nowrap="nowrap">
            <div class="dDialog" onclick="reloadCmt('@Url.Action("CommentsKO", new { CommentID = 0 })${ID}');">@Html.Raw(@Defaults.editImg)</div>&nbsp;
            @Html.Raw(Defaults.delPOSTImgTACO("CommentID", -1, "doCmtDelPost"))
        </td>
        <td>${CommentBy}</td>
        <td>${PostedOn}</td>
        <td>${Comment1}</td>
    </tr>
    </script>
    <script type="text/javascript" language="javascript" defer="defer">
    function doEditable(editDiv)
    {
        editDiv.parentElement.parentElement.children[3].click();
    }
    var doTDHover = true;
    
    function toggleLabel(td) {
        if(doTDHover){
            $('input:first', td).toggle();
            $('span:first', td).html($('input:first', td).val()).toggle();
            //$('span:first', td).html($('input:first', td).val());
        }
    }
    // Put script at bottom to avoid early-references
    $(document).ready(function () {
        //doAjaxForm('#frmComments', '#divComments', null); //AJAXify form
//        try{$("#frmComments").validate({@Defaults.validatorJQsetting});}catch(e){}
        setFocus("Comment1");
        
        createKO();
    });
var IsEditMode = false;
var commentsModel = function () {
            var self = this;
            self.commentToAdd = ko.observable();
            self.allComments = ko.observableArray(); // Initial items
            self.selectedComment = ko.observable(); // Initial selection
            self.allCommentsTemp = ko.observableArray(); // Initial items
            self.emptyComment = {'ID':0,'Comment1':'','PostedOn':Date111, 'ClaimID':0,'CommentBy':'Hemant'};
            //self.jsonText = ko.computed(function() { return ("JSON: " + ko.toJSON(self.commentToAdd())); });
 
            self.saveComment = function (comment) {
                comment.CommentBy("Hemant Save");//alert(ko.mapping.toJSON(ko.mapping.fromJS(new Date())()));
                comment.PostedOn(Date111);//Date111 ko.mapping.fromJS(new Date())
            }
            self.addComment = function () {
                if (self.commentToAdd() != null) // Prevent blanks and duplicates
                    if(self.commentToAdd().Comment1 == null || self.commentToAdd().Comment1 == "")
                        alert("Comment is a required field");
                    else
                    { 
                        self.commentToAdd().CommentBy = "Hemant";//alert(ko.mapping.toJSON(ko.mapping.fromJS(new Date())()));
                        //self.commentToAdd().PostedOn = Date111;//ko.mapping.fromJS(new Date())
                        if(!IsEditMode)
                        { self.allComments.push(cloneObservable(self.commentToAdd())); }

                        IsEditMode = false;
                        //self.commentToAdd({'ID':0,'Comment1':'','PostedOn':Date111, 'ClaimID':0,'CommentBy':'Hemant'}); 
                        self.commentToAdd(cloneObservable(self.emptyComment));  // Clear the text box self.commentToAdd self.commentToAdd.Comment1("");
                    }
            };
 
           self.setSelected = function (comment) {
                if (comment != null) // Prevent blanks and duplicates
                self.commentToAdd(comment);
                self.selectedComment(cloneObservable(comment)); IsEditMode = true;
                self.allCommentsTemp = ko.mapping.fromJS(ko.mapping.toJS(self.allComments));
                return;
                //ko.mapping.fromJS({'ID':0,'Comment1':'','PostedOn':'', 'ClaimID':0,'CommentBy':'Hemant'}, self.commentToAdd);  // Clear the text box self.commentToAdd 
              //try{  
                    //self.commentToAdd(comment); 
                    //self.commentToAdd = ko.mapping.fromJS(ko.toJS(comment));//ko.mapping.fromJS(comment);
                    //self.commentToAdd.Comment1("this is new");// = ko.observable(ko.toJS(comment));// = ko.mapping.fromJS(ko.toJS(comment));//ko.mapping.fromJS(comment);
                    //ko.applyBindings(comment,document.getElementById("addComment"));
                    //ko.mapping.fromJS(comment, self.commentToAdd);
                    
             // }catch(e){alert(e);}
            };

            self.removeSelected = function (comment) {
                if (comment != null) // Prevent blanks and duplicates
                    self.allComments.remove(comment);
            };

            self.cancelComment = function (comment) {
               IsEditMode = false;
               //comment.commentToAdd(comment.selectedComment());//.Comment1 = comment.selectedComment().Comment1;
               //comment.allComments(self.allCommentsTemp);
               //comment.allComments().valueHasMutated();//SO: 8537397
               
               //ko.mapping.fromJS(self.selectedComment, self.commentToAdd);
               self.commentToAdd(self.emptyComment);  // Clear the text box self.commentToAdd 
            };

            self.saveToServer = function() { 
                ko.utils.postJson(location.href, { comments: ko.mapping.toJS(self.allComments) }); 
            }

            /*http://jsfiddle.net/rniemeyer/GgFa9/
            self.jsonText = ko.computed(function() {
            return JSON.stringify($.map(self.allComments(), function (comment) { return comment.val(); }));
            });*/
        };

 function cloneObservable(observableObject) { return ko.mapping.fromJS(ko.toJS(observableObject)); }

 function createKO()
 {
        var viewModel = new commentsModel();        
        $.getJSON('@Url.Action("CommentsKOVM", "Claim", new { ClaimGUID = "" })',
         function(data) { 
         //self.commentsModel = data;
            viewModel.commentToAdd = ko.observable(data.CommentToAdd); //ko.mapping.fromJS(data.CommentToAdd);//
            //var mapping = {'ignore': ["PostedOn"]};
            viewModel.allComments = ko.mapping.fromJS(data.AllComments);//, mapping);//ko.observableArray(data.AllComments); // Initial items         
                 //var viewModel = ko.mapping.fromJS(data); 
                 //$("#commentTemplate").tmpl(data.AllComments).appendTo( "#tbComments" );
                // viewModel.jsonText = ko.dependentObservable(function() {
                // if(this.allComments() != null)  return ("JSON: " + ko.toJSON(this.allComments())); }, this);

          ko.applyBindings(viewModel);
          });
 }

    function doCmtDelPost(txtId, txtVal) {
        var data = {}; data[txtId] = txtVal;
        var url = '@Url.Action("CommentKODelete", "Claim", new { ClaimGUID = "" })';
        $.post(url, data);
        return false; // prevent any postback
    }
      
    </script>
    @*<json>
    @Html.Raw(new JavaScriptSerializer().Serialize(Model.AllComments))
    </json>*@