@model CPM.DAL.vw_Claim_Master_User_Loc
@using System.Collections
@using CPM.Helper
@{ ViewBag.Title = "Claim"; Layout = Defaults.masterLayout; bool IsOnlyCustomer = _Session.IsOnlyCustomer;}
@section HeadContent {
    <script type="text/javascript">        
        //Make sure common.js is included
        $().ready(function() {
        try{DisableSubmitButtons(false);/*$.unblockUI();*/}catch(e){}
        @if (!IsOnlyCustomer)
        {
        <text>
        renderAutoComplete('@Defaults.commonRoot/Lookup?id=OrgSalesperson', '#CustID', '#CustOrg');        
        //bind the event which will auto-select salesperson and set in textbox for the selected customer
        $( "#CustOrg" ).bind( "autocompleteselect", function(event, ui) {        
            $("#CustID").val(ui.item ? ui.item.id : '');//DON'T forget
            //set Interval Locations
            fillLocations(true);
            //Set Salesperson
            $("#SalespersonID").val(ui.item ? ui.item.spid : '');
            $("#SalespersonName").val(ui.item ? ui.item.spName : '').effect('highlight', {}, 2000);
            if($("#SalespersonID").val() != '') $("#SalespersonName").valid();//perform validation so that err msg(if any) is cleared.
        }); 
        </text>
        }
        renderAutoComplete('@Defaults.commonRoot/Lookup?id=Salesperson', '#SalespersonID', '#SalespersonName');
        //HT: Special case for Customer - select default SP
        //$('#SalespersonName').autocomplete('search','@_SessionUsr.OrgID');
            
        fillLocations(false);//Special case to populate locations
        
        //Render tabs
        //SO: 5246558/jquery-tabs-caching-to-be-disabled-temporary-for-switching-tab-and-refreshing-oth
        $("#tabs").tabs({
         /* cache: true, spinner: 'Loading...', ajaxOptions: { cache: false}, 
         http://jqueryui.com/upgrade-guide/1.9/#deprecated-ajaxoptions-and-cache-options-added-beforeload-event */
         beforeLoad: function( event, ui ) {
            ui.ajaxSettings.cache = false;
            if ( ui.tab.data( "loaded" ) ) {  event.preventDefault();  return;  } 
            ui.jqXHR.success(function() {   ui.tab.data( "loaded", true ); });
           },
        activate: function(event, ui) { setFocus1(event, ui) } 
        }); //HT: cache: true - to prevent reload on each tab select!
        
        //bind event to check claim commit
        window.onbeforeunload = chkCommit;
        // Add client side validation
        var validator = $("#frmClaim").validate({@Defaults.validatorJQsetting, focusCleanup: false});
        //,messages:{CustOrg:"This field is required.",Location:"This field is required." }
        
        // Set blockUI for all forms (SO: 10753584)
        $('form').submit(function () {
             if($(this).valid())
                { try{DisableSubmitButtons(true);/*$.blockUI();*/}catch(e){}}
         });
        
        // Pre-Load tabs
        //$("#tabs").tabs('load',1);
        reload('@Url.Action("Items", new { ClaimGUID = Model.ClaimGUID.ToString() })','',"#tabs-2");
        @if (!IsOnlyCustomer){<text>
        //$("#tabs").tabs('load',2);
        reload('@Url.Action("CommentsPg", new { ClaimGUID = Model.ClaimGUID.ToString() })','',"#tabs-3");
        </text>}
        reload('@Url.Action("FilesPg", new { ClaimGUID = Model.ClaimGUID.ToString() })','',"#tabs-4");
        //$("#tabs").tabs('load',3);

        });
    </script>
    <style>
    .autocomp { width:270px;}
    </style>
}
    @{ bool isNewClaim = (Model.ID <= Defaults.Integer);//StatusIDold
       string cancelorDelete = isNewClaim ? "Cancel" : "Delete";
       bool? oprSuccess = ((bool?)ViewData["oprSuccess"]);
       string archiveVal = Model.Archived ? "Unarchive" : "Archive";
       string ClaimNo = isNewClaim ? "(new)" : Model.ClaimNo.ToString();
       bool readonlySP = IsOnlyCustomer && (Model.SalespersonName ?? "").Trim().Length > 0;
       object spNameTXT = new { @class = "required autocomp" };
       if (readonlySP)
       { spNameTXT = new { @class = "required autocomp", @readonly = "readonly" }; } 
    }    
    <table width="99%" align="center" border="0">
    <tr>
        <td align="right">
        <table style="width:90%;" border="0"><tr>
        @if (oprSuccess.HasValue)
        {
        <td style="width:99%;" align="center">@Html.Raw(Defaults.getOprResult(oprSuccess.Value, CPM.Services.ClaimService.delRefChkMsg))</td>}   
        <td nowrap="nowrap" align="right" id="tdButtons">
        <input type="submit" value="Accept" class="button" onclick="skipCommitChk=true; document.getElementById('btnCommit').click();return false;" />&nbsp;
        <input type="reset" value="Cancel" class="button" onclick="try{window.location.href='@Url.Action("Cancel", new { ClaimID = Model.ID, ClaimGUID = Model.ClaimGUID })'}catch(ex){;}"/>&nbsp;
        @if (!isNewClaim && _Session.RoleRights.DeleteClaim)
        {
            using (Html.BeginForm("Delete", "Claim", new { id = Model.ID, ClaimGUID = Model.ClaimGUID }, FormMethod.Post, new { @style = "display:inline" }))
            {
                <input type="submit" value="Delete" title="Delete this claim" class="button" onclick="if(confirmDeleteM
        (event, 'Are you sure you want to delete this claim and all the data related with this claim?'))skipCommitChk=true; else return false;" />@Html.Raw("&nbsp;")}
        } 
        @if (!isNewClaim && _Session.RoleRights.ArchiveClaim)
        {@*START: Archive*@
            using (Html.BeginForm("Archive", "Claim", new { id = Model.ID, ClaimGUID = Model.ClaimGUID, archive = !Model.Archived }, FormMethod.Post, new { @style = "display:inline" }))
            {
                <input type="submit" value="@archiveVal" title="@archiveVal this claim" class="button" onclick="if(confirmDeleteM(event, 'Are you sure you want to @archiveVal this claim?'))skipCommitChk=true; else return false;" />@Html.Raw("&nbsp;")}
        }@* END: Archive*@@if (!isNewClaim)
                          { //&& !IsOnlyCustomer
                <input type="button" value="Print" class="button" onclick="javascript:openWinScrollable('@Url.Action("Print", "Claim", new { ClaimID = Model.ID })',648,838);" />@Html.Raw("&nbsp;")}
@if (_Session.IsInternal && !isNewClaim)
{<a href='@Url.Action("PrintPDF")' target="_blank">PDF</a>@Html.Raw("&nbsp;")
<a href='@Url.Action("CommentsKO")' style="color:Blue"><i>CommentsKO (demo)</i></a>@Html.Raw("&nbsp;")
}

</td></tr></table>
        </td>
    </tr>
        <tr>
            <td>
            <div id="tabs">
            <ul>
                        <li><a href="#tabs-1"><span>Header</span></a></li>
                        <li><a href="#tabs-2" href1='@Url.Action("Items", new { ClaimGUID = Model.ClaimGUID.ToString() })'><span>Details</span></a></li>
            @if (!IsOnlyCustomer)
            { <li><a href="#tabs-3" href1='@Url.Action("CommentsPg", new { ClaimGUID = Model.ClaimGUID.ToString() })'><span>Comments</span></a></li>} 
                        <li><a href="#tabs-4" href1='@Url.Action("FilesPg", new { ClaimGUID = Model.ClaimGUID.ToString() })'><span>Files</span></a></li>
                    </ul>
                    <div id="tabs-1">
                    &nbsp;@using (Html.BeginForm("Manage", "Claim", new { ClaimID = Model.ID }, FormMethod.Post, new { id = "frmClaim" }))
                          {@Html.HiddenFor(model => model.ID)@Html.CheckBox("isAddMode", isNewClaim, new { @style = "display:none" })<table width="50%" border="0" cellpadding="2" cellspacing="2">
                                <tr>
                                    <td nowrap="nowrap" width="1%" align="right">@Html.LabelFor(model => model.ClaimNo)</td>
                                    <td nowrap="nowrap" width="40%">@ClaimNo@Html.HiddenFor(model => model.ClaimNo)</td>
                                    <td nowrap="nowrap">&nbsp;&nbsp;</td>
                                    <td nowrap="nowrap" width="1%" align="right">@Html.LabelFor(model => model.StatusID)</td>
                                    <td nowrap="nowrap" width="40%">
                                        @Html.DropDownList("StatusID", new SelectList((IEnumerable)ViewData["Statuses"], "id", "value", Model.StatusID), new { @class = "dropDown required" })
                                        @Html.HiddenFor(model => model.StatusIDold)<br />
                                        @Html.ValidationMessageFor(model => model.StatusID)
                                    </td>
                                    <td nowrap="nowrap" width="1%">
                                    @if (!isNewClaim)
                                    { 
                                    <div class="dDialog uline" onclick="showDialog('#ddlg');">Status History</div>@Html.Raw("&nbsp;")
                                    <div id="ddlg" style="text-align:right"></div> @*Show Status dialog*@
                                    <script type="text/Javascript" language="javascript">
                                        function showDialog(containerID)    
                                    {
                                        $(containerID).dialog({
                                            modal: false,
                                            open: function ()
                                            {
                                                $(this).html(loading);
                                                $(this).load('@Url.Content("~/Claim/")@(Model.ID)/Status');
                                            },
                                            height: 360,
                                            width: 650,
                                            title: 'Status History'
                                        });
                                    }
                                    </script>                                    
                                    } 
                                        </td>
                                </tr>
                                <tr>
                                <td nowrap="nowrap" align="right">@Html.LabelFor(model => model.ClaimDate)</td>
                                    <td nowrap="nowrap">&nbsp;@Model.ClaimDate.ToString(Defaults.dtFormat, Defaults.ci)@*Html.TextBoxFor(model => model.ClaimDate)*@ @Html.ValidationMessageFor(model => model.ClaimDate)
                                    @Html.Hidden("ClaimDate", Model.ClaimDate.ToString("dd-MMM-yyyy hh:mm:ss tt"))</td>
                                    <td nowrap="nowrap">&nbsp;</td>
                                    <td nowrap="nowrap" align="right">@Html.LabelFor(model => model.BrandID)</td>
                                    <td nowrap="nowrap">@(Html.DropDownList("BrandID", new SelectList((IEnumerable)ViewData["Brands"],
    "id", "value", Model.BrandID), new { @class = "dropDown required", @onchange = "doBrandSelected(this)" }))
                                        <br />@Html.ValidationMessageFor(model => model.BrandID)
                                    </td>
                                    <td nowrap="nowrap">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td nowrap="nowrap" align="right">@Html.LabelFor(model => model.CustID)</td>
                                    <td nowrap="nowrap">@if (!IsOnlyCustomer)
                                                        { 
                                        @Html.TextBox("CustOrg", Model.CustOrg, new { @class = "required autocomp" })@Html.Raw("&nbsp;")@Html.Raw(string.Format(Defaults.lookupImgBtn, "CustOrg"))@Html.TextBox("CustID", Model.CustID)<br />@Html.ValidationMessageFor(model => model.CustID) }
                                                        else
                                                        {@_SessionUsr.OrgName@Html.Raw("&nbsp;&nbsp;")@Html.HiddenFor(model => model.CustID)} 
                                    </td>
                                    <td nowrap="nowrap">&nbsp;</td>
                                    <td nowrap="nowrap" align="right">@Html.LabelFor(model => model.CustRefNo)</td>
                                    <td nowrap="nowrap">@Html.CustomTextBoxFor(model => model.CustRefNo, new { @class = "autocomp" })</td>
                                    <td nowrap="nowrap">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td nowrap="nowrap" align="right">@Html.LabelFor(model => model.ShipToLocationID)</td>
                                    <td nowrap="nowrap">@Html.TextBox("Location", Model.LocationAndCode, new { @class = "required autocomp" })&nbsp;@Html.Raw(string.Format(Defaults.lookupImgBtn, "Location"))@Html.TextBox("ShipToLocationID", Model.ShipToLocationID)<br />@Html.ValidationMessageFor(model => model.ShipToLocationID)
                                    </td>
                                    <td nowrap="nowrap">&nbsp;</td>
                                    <td nowrap="nowrap" align="right">@Html.LabelFor(model => model.SalespersonID)</td>
                                    <td nowrap="nowrap">
                                      @Html.TextBox("SalespersonName", Model.SalespersonName, spNameTXT)&nbsp;@Html.Raw(string.Format(Defaults.lookupImgBtn, "SalespersonName"))@Html.TextBox("SalespersonID", Model.SalespersonID)<br />@Html.ValidationMessageFor(model => model.SalespersonID)
                                    </td>
                                    <td nowrap="nowrap">&nbsp;</td>
                                </tr>
                                <tr style="display:none">
                                    <td nowrap="nowrap" align="right">@Html.LabelFor(model => model.VendorID)</td>
                                    <td nowrap="nowrap" colspan="5">@Html.TextBox("VendorID", Model.VendorID, new { @style = "width:200px" })
                                    @* Might be needed in future  @Html.ValidationMessageFor(model => model.VendorID) *@
                                    </td>                                    
                                </tr>
                                <tr style="display:none">
                                    <td><br /><br /></td>
                                    <td colspan="5">
                                    @Html.Hidden("ClaimGUID", Model.ClaimGUID)
                                    <input type="submit" value="Commit all" class="button" id="btnCommit" name="btnCommit" /></td>                                    
                                </tr>
                            </table>}
                    </div>    
                    <div id="tabs-2">
                    { Html.RenderAction("Items", new { ClaimGUID = Model.ClaimGUID.ToString() }); }
                    </div>
                    @if (!IsOnlyCustomer)
                    {<div id="tabs-3"></div>}
                    <div id="tabs-4"></div>
                </div>
            </td>
        </tr>
    </table>
    <script language="javascript" type="text/javascript" defer="defer">        setFocus("StatusID");
        function setFocus1(evt, ui) {
            // Objects available in the function context:
            // ui.tab     // anchor element of the selected (clicked) tab
            // ui.panel   // element, that contains the selected/clicked tab contents
            // ui.index   // zero-based index of the selected (clicked) tab
            switch (ui.index) {
                case 0: //Details
                    setFocus("StatusID"); break;
                case 1: //Items
                    //setFocus("ItemCode"); break; - Done in the cshtml (partial)
                case 2: //Comments
                    @if (IsOnlyCustomer)
                    { @Html.Raw("setFocus(\"FileNameNEW\");") }
                    else
                    { @Html.Raw("setFocus(\"Comment1\");") }  break;
                case 3: //Files
                    setFocus("FileNameNEW"); break;
            }
        }
        var oriCustID = '@Model.CustID';
        function fillLocations(reset)
        {
            if (reset)
             {$("#ShipToLocationID").val(''); $("#Location").val('');}
            
            var CustID = $("#CustID").val();
            CustID = (CustID==null || CustID.toString().length < 1)? oriCustID : CustID;//set or reset
            
            var url = '@Defaults.commonRoot/Lookup?id=ShipLoc&extras=' + CustID;
            renderAutoComplete(url, '#ShipToLocationID', '#Location');//Get locations
        }
        
        var skipCommitChk = false, leavePg = false;
        // Check and prompt if the user is getting away from the page without
        function chkCommit(e) {
            if (skipCommitChk) { skipCommitChk = false; return; }//Special case
            
            if (!e) e = window.event;
            //e.cancelBubble is supported by IE - this will kill the bubbling process.
            e.cancelBubble = true;
            e.returnValue = 'Make sure you have saved the Claim or all the changes will be lost. Do you want to leave now?'; 
            //Above is displayed on the dialog

            //e.stopPropagation works in Firefox.
            if (e.stopPropagation) {e.stopPropagation();e.preventDefault();}
        }
        function doBrandSelected(ddl)
        {
            try{ // Re-initiate Items for the selected Brand
            if($("#ItemCode")[0]!= null)
                fillItemsForBrand(ddl.value, true);
            } catch(err){}            
        }
    </script>
    <script language="javascript" src="@Url.Content("~/Content/Scripts/jquery.numeric.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Content/Scripts/jquery.taconite.js")" type="text/javascript" ></script>
    @*<script src="@Url.Content("~/Content/Scripts/jquery.blockUI.js")" type="text/javascript"></script>*@
