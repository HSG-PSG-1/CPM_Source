@model PagedList<CPM.DAL.vw_Claim_Dashboard>
@using Webdiyer.WebControls.Mvc
@using CPM.Services
@using CPM.Helper
@{  object routeValues = new { qData = Request["qData"] };
    string reload = "return reloadList(this.href);"; }
    
 <table width="100%" class="thinBorder">
        @*NOTE: DO NOT change column order without updating the Group logic variables below*@
        <thead class="header">
                <tr>
                    <th nowrap="nowrap">@Html.Raw(Html.SortableColumn("Claim #", "ClaimNo", reload, routeValues, true, false))</th>
                    <th nowrap="nowrap">@Html.Raw(Html.SortableColumn("Claim Date", "ClaimDateOnly", reload, routeValues))</th>
                    <th nowrap="nowrap">@Html.Raw(HttpUtility.HtmlDecode(Html.SortableColumn("Customer<br/>Ref #", "CustRefNo", reload, routeValues)))</th>
                    <th nowrap="nowrap">@Html.Raw(Html.SortableColumn("Location", "ShipToLoc", reload, routeValues))</th>
                    <th nowrap="nowrap">@Html.Raw(Html.SortableColumn("Brand", "BrandName", reload, routeValues))</th>
                    <th nowrap="nowrap">@Html.Raw(Html.SortableColumn("Status", "Status", reload, routeValues))</th>
                    <th nowrap="nowrap">@Html.Raw(Html.SortableColumn("File", "FilesHExist", reload, routeValues))</th>
                </tr>
            </thead>
            @*<tbody> - DON'T because we'll add multiple tbody for group by *@
                @{ string prevTxt = "", val = "", prevID = ""; int i = 0; string claimId = "-1", archived = "false"; }
                   @foreach (var item in Model){
                       i = 0; claimId = item.ID.ToString(); archived = item.Archived.ToString().ToLower();
                   @Html.Raw(Defaults.getGroupOnSortTbody(item, prevTxt, new System.Collections.Specialized.StringDictionary() {
{ "ClaimDateOnly", "Claim Date" }, { "ShipToLoc", "Location" },{ "BrandName", "Brand" }, { "Status", "Status" } },        
                        out val, item.ID, ref i, 7, ref prevID))
                <tr>
                    <td align="center">
                    @{ string href =  Url.Action(!item.Archived?"Manage?":"Archived", "Claim", new { ClaimId = item.ID });}
                    <a href='@HttpUtility.UrlDecode(href)' title="Click to view this claim">
                        <div style="height: 99%; cursor: pointer;"><u>@item.ClaimNo</u></div>
                    </a>                    
                    </td>
                    <td align="center">@item.ClaimDateTxt</td>
                    <td align="center">@item.CustRefNo</td>
                    <td align="center">@item.ShipToLocAndCode</td>
                    <td align="center">@item.BrandName</td>
                    <td align="center">                                
                         <div id="dialog@(item.ID)"></div>
                         <div class="dDialog uline" onclick="showDialog('Status',@claimId,@archived);statTDdiv = this;">@item.Status</div>
                    </td>
                    <td align="center">
                    @if (item.FilesHExist > 0){      
                        <input type="image" src="@Url.Content("~/Content/Images/files.gif")" alt="View Files"
                onclick="showDialog('Files',@claimId,@archived);return false;" />} 
                    </td>
                </tr>
                  prevTxt = val; } @if (!string.IsNullOrEmpty(val)){@*SPECIAL CASE js function for grouped data counter*@
  @Html.Raw("</tbody>")<script defer="defer">reviseLastGrpCount('@prevID');</script>}
            <tfoot>
                <tr>
                    <td colspan="10" align="center">
                        <table cellpadding="0" cellspacing="0" class="pager" width="100%">
                            <tr>
                                <td nowrap="nowrap">
                                    &nbsp;Record count :
                                    @Model.TotalItemCount&nbsp;
                                </td>
                                <td align="center" width="98%" nowrap="nowrap">
                                    @(Html.Pager(Model, new PagerOptions
{
PageIndexParameterName = "index",
CssClass = "pager",
FirstPageText = "&nbsp;|<&nbsp;",
PrevPageText = "&nbsp;<<&nbsp;",
NextPageText = "&nbsp;>>&nbsp;",
LastPageText = "&nbsp;>|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",
PageIndexBoxType = PageIndexBoxType.DropDownList,  /*, ContainerTagName="span"*/
}))
                                </td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </tfoot>
</table>
@*@{ QryString.SetSecondarySort(ViewData["SetPrevSort"]); }*@
<script language="javascript" type="text/javascript" defer="defer">
 $('div.pager').children('a').click(function() { @Html.Raw(reload) });
        var loading = '<div style="text-align:center;display:block;"><img src=" @Url.Content("~/Content/Images/loading.gif")" title="" alt="Loading" /></div>';
        function reloadList(url) {
            try {
                $("#tdGrid").html(loading);
                return reload(url, '', "#tdGrid");
            } catch (ex) { return false; } 
        } 
    </script>
