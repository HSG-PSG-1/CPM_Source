@using CPM.Services
@using CPM.Helper
<script type="text/javascript">
var loading = '<div style="text-align:center;display:block;"><img src=" @Url.Content("~/Content/Images/loading.gif")" title="" alt="Loading" /></div>';
       
function openPrintDialog(ClaimId)
{
    if(ClaimId > 0)
    return openWinScrollable("@HttpUtility.UrlDecode(Url.Action("Print", "Claim", new { ClaimID = -99 }))".replace('-99',ClaimId),648,838);
} 
@*function gotoClaim(ClaimId)
{
    window.location.href = 
    "@HttpUtility.UrlDecode(Url.Action("Manage?", "Claim", new { ClaimId = -99 }))".replace('-99',ClaimId);
}*@

@* KO based pagination *@
function updatePagedRows(vm)
{// Starts with : index=0
    ListURL = ListURL.replace("index=" + (vm.pageIndex()-1), "index=" + vm.pageIndex());
    showDlg(true);
    $.getJSON(ListURL, function (data) {
            showDlg(false);
            //viewModel.Claims = ko.observableArray(data); // Initial items
            //ko.applyBindings(viewModel);
            if(data != null)
            ko.utils.arrayForEach(data, function (item) {
                vm_D.fields.push(item);
            });
            else
                vm_D.pageIndex(0);//reset            
        });
}
@*var pagedGrid = {};
pagedGrid.DisplayFields = function(jsondata) {
    //extracted

    //if(doApplyBinding)
    ko.applyBindings(viewModel);
}; *@

var viewModel = function(){        
        var self = this;
        self.fields =  ko.observableArray();//jsondata
        self.pageSize = ko.observable(@ViewData["gridPageSize"]);
        self.pageIndex = ko.observable(0);
        self.cachedPagesTill = ko.observable(0);
        self.sortField = ko.observable("ClaimNo");
        self.sortOrderNxtAsc = ko.observable(true);
        self.search = ko.observable();
        self.invokeSearch = ko.observable(2);
        @*self.quickSearch =  ko.observable("");*@
        
        self.previousPage = function() {
            self.pageIndex(self.pageIndex() - 1);
            if(self.cachedPagesTill() < 1)
                self.cachedPagesTill(0);
            self.cachedPagesTill(self.cachedPagesTill() + 1);
        };
        self.nextPage = function() {            
            self.pageIndex(self.pageIndex() + 1);            
            //if(self.cachedPagesTill() < 1)
            //    updatePagedRows(self);
            self.cachedPagesTill(self.cachedPagesTill() - 1);
        };

        self.filteredRecords = ko.computed(function() {
            var s = self.invokeSearch();self.invokeSearch(0);
            
            var s = self.search;

            var ClaimNos = (s.ClaimNos != null && s.ClaimNos() != null && s.ClaimNos() != "")?s.ClaimNos():null;
            var StatusID = (s.StatusID != null && s.StatusID() != null && s.StatusID() != "")?s.StatusID():0;
            var AssignToName = (s.AssignToName != null && s.AssignToName() != null && s.AssignToName() != "")?s.AssignToName().toLowerCase():null;
            var CustRefNo = (s.CustRefNo != null && s.CustRefNo() != null && s.CustRefNo() != "")?s.CustRefNo().toLowerCase():null;            
            var BrandName = (s.BrandName != null && s.BrandName() != null && s.BrandName() != "")?s.BrandName().toLowerCase():null;
            var CustOrg = (s.CustOrg != null && s.CustOrg() != null && s.CustOrg() != "")?s.CustOrg().toLowerCase():null;
            var Salesperson = (s.Salesperson != null && s.Salesperson() != null && s.Salesperson() != "")?s.Salesperson().toLowerCase():null;
            var Archived = (s.Archived != null)?s.Archived():false;

            var ClaimDateFrom = (s.ClaimDateFrom != null && s.ClaimDateFrom() != "")?s.ClaimDateFrom():null;
            var ClaimDateTo = (s.ClaimDateTo != null && s.ClaimDateTo() != "")?s.ClaimDateTo():null;

            @*var quickSearch = (self.quickSearch != null && self.quickSearch() != null && self.quickSearch() != "")?self.quickSearch().toLowerCase():null;*@
                        
            self.pageIndex(0);
                        
            return ko.utils.arrayFilter(self.fields(), function(rec) {                                
                return (
                    (ClaimNos == null || rec.ClaimNo.toString().indexOf(ClaimNos) > -1) &&
                    (StatusID < 1 || rec.StatusID == StatusID) &&
                    (AssignToName == null || rec.AssignToName.toLowerCase().indexOf(AssignToName) > -1) &&
                    
                    (CustRefNo == null || (rec.CustRefNo != null && rec.CustRefNo.toLowerCase().indexOf(CustRefNo) > -1)) &&
                    
                    (BrandName == null || rec.BrandName.toLowerCase().indexOf(BrandName) > -1) &&
                    (CustOrg == null || rec.CustOrg.toLowerCase().indexOf(CustOrg) > -1) &&
                    (Salesperson == null || rec.Salesperson.toLowerCase().indexOf(Salesperson) > -1) &&                    
                    (ClaimDateFrom == null || new Date(rec.ClaimDateOnly) >= new Date(ClaimDateFrom)) &&
                    (ClaimDateTo == null || new Date(rec.ClaimDateOnly) <= new Date(ClaimDateTo)) &&
                    (rec.Archived == Archived) 
                    @* START : Special case quick search filter 
                    && (quickSearch == null ||
                        (
                            rec.Status.toLowerCase().indexOf(quickSearch) > -1 ||
                            rec.AssignToName.toLowerCase().indexOf(quickSearch) > -1 ||
                            (rec.CustRefNo != null && rec.CustRefNo.toLowerCase().indexOf(quickSearch) > -1) ||
                            rec.BrandName.toLowerCase().indexOf(quickSearch) > -1 ||
                            rec.CustOrg.toLowerCase().indexOf(quickSearch) > -1 ||
                            rec.Salesperson.toLowerCase().indexOf(quickSearch) > -1
                        )
                    )
                     END : Special case quick search filter *@
                );
            });
            @*
            SO: 13229970/knockout-filtering
            return ko.utils.arrayFilter([item.FirstName().toLowerCase(), item.lastName().toLowerCase(), 
            item.email().toLowerCase(), item.company().toLowerCase()], function (str) { return str.indexOf(filter) != -1  }).length > 0;*@                
            //else            return self.fields();            
        });

        self.maxPageIndex = ko.computed(function() {//dependentObservable
            var s = self.invokeSearch();self.invokeSearch(0);
            return Math.ceil(self.filteredRecords().length / self.pageSize()) - 1;
        });

        self.pagedRows = ko.computed(function() {//dependentObservable
                var size = self.pageSize();
                var start = self.pageIndex() * size;
                return self.filteredRecords().slice(start, start + size);
        });

        self.sortData = function(data, event, sort)
        {
            if((self.sortField() == sort))
                self.sortOrderNxtAsc(!self.sortOrderNxtAsc());
            else
                {self.sortField(sort); self.sortOrderNxtAsc(false);}
            
            var sortOrder = self.sortOrderNxtAsc()? -1 : 1; // Asc : Desc

            @*"click: function(data,event){fields.sort(function (l, r) { return l.Status > r.Status ? 1 : -1 })}"*@
            switch (sort)
            {
            case "ClaimNo":
                 self.fields.sort(function (l, r) { return l.ClaimNo > r.ClaimNo ? 1*sortOrder : -1*sortOrder });                
                 break;
            case "ClaimDateOnly":
                self.fields.sort(function (l, r) { return new Date(l.ClaimDateOnly) > new Date(r.ClaimDateOnly) ? 1*sortOrder : -1*sortOrder }); // ClaimDate
                break;
            case "CustRefNo": // Need to convert into string while comparison
                self.fields.sort(function (l, r) { return l.CustRefNo + "" > r.CustRefNo + "" ? 1*sortOrder : -1*sortOrder });                
                break;
            case "CustOrg":
                self.fields.sort(function (l, r) { return l.CustOrg > r.CustOrg ? 1*sortOrder : -1*sortOrder });                
                break;
            case "ShipToLocAndCode"://ShipToLoc
                self.fields.sort(function (l, r) { return l.ShipToLocAndCode > r.ShipToLocAndCode ? 1*sortOrder : -1*sortOrder });
                break;
            case "BrandName":
                self.fields.sort(function (l, r) { return l.BrandName > r.BrandName ? 1*sortOrder : -1*sortOrder });
                break;                  
            case "Salesperson":
                  self.fields.sort(function (l, r) { return l.Salesperson > r.Salesperson ? 1*sortOrder : -1*sortOrder });                  
                  break;
            case "Status":
                  self.fields.sort(function (l, r) { return l.Status > r.Status ? 1*sortOrder : -1*sortOrder });                  
                  break;
            case "CommentsExist":
                self.fields.sort(function (l, r) { return l.CommentsExist > r.CommentsExist ? 1*sortOrder : -1*sortOrder });                
                break;
            case "FilesHExist":
                self.fields.sort(function (l, r) { return l.FilesHExist > r.FilesHExist ? 1*sortOrder : -1*sortOrder });                
                break;
            }  
            
            $(".header tr th").each(function(i){
                $(this).html($(this).html().replace("▲",""));
                $(this).html($(this).html().replace("▼",""));
                @*$(this).html($(this).html().replace("&#9650;","&#9660;"));*@
        
                if($(this).html().indexOf(vm_D.sortField()) > -1)
                    $(this).html($(this).html() + " " + (vm_D.sortOrderNxtAsc()?"▼": "▲"));
            });

            self.pageIndex(0);  self.cachedPagesTill(0);
        }
    };
</script>