@model CPM.Models.RoleRights
@using CPM.Helper
@using System.Collections
@{
   bool isMyRole = (Model.Title == _SessionUsr.RoleName);
   string onClickForCANCEL = " onclick='" + (Model.IsDeleted ? " if(confirmDelete(event))deleteTR(this)" : 
       "deleteTR(this)") + " ;return false;'";
   string onClickForDEL = " onclick='" + (Model.IsDeleted ? "deleteTR(this)" : 
       " if(confirmDelete(event))deleteTR(this)") + " ;return false;'";
   
    string trClass = Model.IsDeleted?"deletedTR":"deletedTR_NO";   
    string trNewDspStyle = Model.IsAdded?"":"none";
    string tr = "<tr class=" + trClass + " >";
    string trNew = "<tr id=\"trAddNew\" name=\"trAddNew\" style=\"display:" + trNewDspStyle +"\">";
}

@if (Model.LastModifiedBy != Defaults.Integer){ @Html.Raw(tr) } else { @Html.Raw(trNew) }
    <td align="center">
    @* Make sure these 3 checks are right before the delete image which is triggering the event *@
        @Html.CheckBoxFor(model => model.IsAdded, new {@style = "display:none" })
        @Html.CheckBoxFor(model => model.IsDeleted, new { @style = "display:none" })
        @Html.CheckBoxFor(model => model.IsUpdated, new { @style = "display:none" })              
    @if(!isMyRole && Model.CanDelete) {@* Make sure access is provided only if it is NOT the user's ROLE *@
        if(!(Model.LastModifiedBy == Defaults.Integer)){@*Need parent to be able to toggling image*@       
        <span>@Html.Raw(string.Format((Model.IsDeleted ? Defaults.cancelImgOnly : Defaults.delImgOnly), onClickForDEL))
        @Html.Raw(string.Format((Model.IsDeleted ? Defaults.delImgOnly : Defaults.cancelImgOnly), " style='display:none' " + onClickForCANCEL))
        </span>
        } else{ @Html.Raw(string.Format(Defaults.cancelImgOnly, "onclick=\"showHideNew(false,this);\"")) }
    }             
        @Html.HiddenFor(model => model.ID)            
    </td>
    <td>
    @* @if(!isMyRole){ *@
    @Html.TextBoxFor(model => model.Title, new { @style = "width:96%", @class = "required" })@Html.ValidationMessageFor(model => model.Title)@Html.HiddenFor(model => model.TitleOLD)@Html.ValidationSummary(true)
    @*@}else{@Model.Title}*@                 
    </td>
    <td style="display:none">
        @Html.TextBoxFor(model => model.SortOrder, new { @style = "width:99%" })@Html.ValidationMessageFor(model => model.SortOrder)@Html.HiddenFor(model => model.SortOrderOLD)            
    </td>
    <td>
    @Html.DropDownListFor(model => model.RoleData.OrgTypeId, new SelectList((IEnumerable)ViewData["OrgTypes"], "ID", "VALUE", Model.RoleData.OrgTypeId), new { @class = "dropDown required" })@Html.ValidationMessageFor(model => model.RoleData.OrgTypeId)
    </td>
    <td align="center">@Html.CheckBoxFor(model => model.RoleData.ManageRole, new {@style="width:40%" })</td>
    <td align="center">@Html.CheckBoxFor(model => model.RoleData.ManageMaster, new { @style = "width:40%" })</td>
    <td align="center">@Html.CheckBoxFor(model => model.RoleData.ManageUser, new { @style = "width:40%" })</td>
    <td align="center">@Html.CheckBoxFor(model => model.RoleData.DeleteClaim, new { @style = "width:40%" })</td>
    <td align="center">@Html.CheckBoxFor(model => model.RoleData.ViewActivity, new { @style = "width:40%" })</td>
    <td align="center">@Html.CheckBoxFor(model => model.RoleData.ManageSetting, new { @style = "width:40%" })</td>
    <td align="center">@Html.CheckBoxFor(model => model.RoleData.ArchiveClaim, new { @style = "width:40%" })</td>
    <td>@Html.HiddenFor(model => model.LastModifiedBy)@Model.LastModifiedByVal@Html.HiddenFor(model => model.LastModifiedByVal)</td>
    <td align="center">
        @Html.Hidden("LastModifiedDate", Model.LastModifiedDate.ToString("dd-MMM-yyyy hh:mm:ss"))@Model.LastModifiedDate.ToString(Defaults.dtFormat, Defaults.ci)
        @* @Model.CanDelete.ToString() *@ @Html.HiddenFor(model => model.CanDelete)
    </td>
</tr>